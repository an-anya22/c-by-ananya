//Matrix Cascade
#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

int main() {
    int t;
    cin >> t;

    while (t--) {
        int n;
        cin >> n;

        vector<string> matrix(n);
        for (int i = 0; i < n; ++i) {
            cin >> matrix[i];
        }

        vector<int> maxInversionRow(n), minInversionRow(n, n);
        vector<int> maxInversionCol(n), minInversionCol(n, n);

        for (int i = n - 1; i >= 0; --i) {
            for (int j = n - 1; j >= 0; --j) {
                if (matrix[i][j] == '1') {
                    maxInversionRow[i] = max(maxInversionRow[i], j);
                    minInversionRow[i] = min(minInversionRow[i], j);
                    maxInversionCol[j] = max(maxInversionCol[j], i);
                    minInversionCol[j] = min(minInversionCol[j], i);
                }
            }
        }

        int minSteps = n - 1;

        for (int i = 0; i < n; ++i) {
            for (int j = 0; j < n; ++j) {
                if (matrix[i][j] == '1') {
                    int maxSteps = max(max(j, n - j - 1), max(i, n - i - 1));
                    int minStepsForRow = max(maxInversionRow[i] - j, j - minInversionRow[i]);
                    int minStepsForCol = max(maxInversionCol[j] - i, i - minInversionCol[j]);
                    minSteps = min(minSteps, max(maxSteps, max(minStepsForRow, minStepsForCol)));
                }
            }
        }

        cout << minSteps << endl;
    }

    return 0;
}
